diff --git a/plugins/views/views_php_handler_field.inc b/plugins/views/views_php_handler_field.inc
index 87790b7..e4f1ae6 100644
--- a/plugins/views/views_php_handler_field.inc
+++ b/plugins/views/views_php_handler_field.inc
@@ -44,7 +44,7 @@ class views_php_handler_field extends views_handler_field {
     $form += views_php_form_element($this,
       FALSE,
       array('php_value', t('Value code'), t('Code to construct the value of this field.'), FALSE),
-      array('$view', '$handler', '$static')
+      array('$view', '$handler', '$static', '$row')
     );
     $form += views_php_form_element($this,
       array('use_php_click_sortable', t('Enable click sort'), t('If checked, you can use PHP code to enable click sort on the field.')),
@@ -128,10 +128,19 @@ class views_php_handler_field extends views_handler_field {
   function php_post_execute() {
     // Execute value PHP code.
     if (!empty($this->options['php_value'])) {
-      $function = create_function('$view, $handler, &$static', $this->options['php_value'] . ';');
+      $function = create_function('$view, $handler, &$static, $row', $this->options['php_value'] . ';');
       ob_start();
       foreach ($this->view->result as $i => &$row) {
-        $row->{$this->field_alias} = $function($this->view, $this, $this->php_static_variable);
+        $normalized_row = new stdClass;
+        foreach ($this->view->display_handler->get_handlers('field') as $field => $handler) {
+          // Do not add our own field. Also, do not add other fields that have no data yet. This occurs because
+          // the value code is evaluated in hook_views_post_execute(), but field data is made available in hook_views_pre_render(),
+          // which is called after hook_views_post_execute().
+          if ((empty($handler->aliases) || empty($handler->aliases['entity_type'])) && $handler->field_alias != $this->field_alias) {
+            $normalized_row->$field = isset($row->{$handler->field_alias}) ? $row->{$handler->field_alias} : NULL;
+          }
+        }
+        $row->{$this->field_alias} = $function($this->view, $this, $this->php_static_variable, $normalized_row);
       }
       ob_end_clean();
     }
diff --git a/views_php.module b/views_php.module
index aee5971..02a5275 100644
--- a/views_php.module
+++ b/views_php.module
@@ -47,8 +47,8 @@ function views_php_form_element($handler, $checkbox = FALSE, $input, $variables
       '$handler' => t('The handler object.'),
       '$plugin'  => t('The plugin object.'),
       '$static'  => t('A variable that can be used to store reusable data per row.'),
-      '$row'     => t('Contains the retrieved record from the database (e.g. $data->nid).'),
-      '$data'    => t('Contains the retrieved record from the database (e.g. $data->nid).'),
+      '$row'     => t('Contains the retrieved record from the database per row.'),
+      '$data'    => t('Contains the retrieved record from the database for all rows.'),
       '$results' => t('Array containing the view\'s result.'),
       '$cache'   => t('The cache object.'),
     );
@@ -102,7 +102,16 @@ function views_php_form_element($handler, $checkbox = FALSE, $input, $variables
     $items[] = l($variable_name, '', array('fragment' => $container[$name]['#id'], 'external' => TRUE)) . ': ' . $description;
 
     if (strpos($variable_name, '$row') === 0) {
+      $php_value = ($input[0] == 'php_value') ? true : false;
+
       foreach ($handler->view->display_handler->get_handlers('field') as $field => $field_handler) {
+        // Do not add fields that will not have data when evaluating the value code. This occurs because
+        // the value code is evaluated in hook_views_post_execute(), but field data is made available in hook_views_pre_render(),
+        // which is called after hook_views_post_execute().
+        if ($php_value && $field_handler->table != $field_handler->view->base_table) {
+          continue;
+        }
+
         $items[] = l($variable_name . '->' . $field, '', array('fragment' => $container[$name]['#id'], 'external' => TRUE)) . ': ' . $field_handler->ui_name();
       }
     }
